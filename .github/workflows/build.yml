# File: .github/workflows/build.yml

name: Build and Release Zen Browser .deb Package

on:
  # 1. Manually from the Actions tab, to force a build of a specific version.
  workflow_dispatch:
    inputs:
      zen_version:
        description: 'Force build for a specific version tag (e.g., v1.2.3)'
        required: true

  # 2. On a schedule (e.g., daily at 05:00 UTC) to check for new releases.
  schedule:
    - cron: '0 5 * * *'

jobs:
  # JOB 1: Check if there are new upstream releases to package.
  check_for_new_releases:
    runs-on: ubuntu-latest
    # This job only needs to read contents.
    permissions:
      contents: read
    outputs:
      # This output will be a JSON array of version tags to build, e.g., ["v1.2.4", "v1.2.5"]
      matrix: ${{ steps.generate_matrix.outputs.matrix }}

    steps:
      - name: Generate matrix of new versions to build
        id: generate_matrix
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # If this was a manual trigger, the matrix is just the single version provided by the user.
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "Manual trigger detected. Setting matrix for version: ${{ github.event.inputs.zen_version }}"
            JSON_MATRIX=$(echo '${{ github.event.inputs.zen_version }}' | jq -R . | jq -s .)
            echo "matrix=${JSON_MATRIX}" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # If this is a scheduled run, compare upstream releases with our releases.
          echo "Scheduled run detected. Comparing upstream releases with our own."
          
          # Get all release tags from the official Zen Browser repository.
          UPSTREAM_RELEASES=$(gh release list --repo zen-browser/desktop --limit 100 --json tagName --jq '.[].tagName')
          echo -e "Upstream releases found:\n${UPSTREAM_RELEASES}"
          
          # Get all release tags from our own packaging repository.
          OUR_RELEASES=$(gh release list --limit 100 --json tagName --jq '.[].tagName')
          echo -e "Our packaged releases found:\n${OUR_RELEASES}"

          # Find versions that exist upstream but not in our releases.
          NEW_RELEASES=$(grep -v -F -x -f <(echo "${OUR_RELEASES}") <(echo "${UPSTREAM_RELEASES}"))
          
          if [ -z "$NEW_RELEASES" ]; then
            echo "No new releases to package. Matrix will be empty."
            echo "matrix=[]" >> $GITHUB_OUTPUT
          else
            echo -e "New releases to package:\n${NEW_RELEASES}"
            # Convert the list of new releases into a proper JSON array for the matrix.
            JSON_MATRIX=$(echo "${NEW_RELEASES}" | jq -R . | jq -s .)
            echo "matrix=${JSON_MATRIX}" >> $GITHUB_OUTPUT
          fi

  # JOB 2: Build and release a .deb for each version found in the matrix.
  build_and_release:
    # This job depends on the check job and will only run if the matrix is not empty.
    needs: check_for_new_releases
    if: needs.check_for_new_releases.outputs.matrix != '[]'
    
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed to create releases and upload assets.

    # Use a matrix strategy to run this job for each new version.
    strategy:
      fail-fast: false # If one version fails to build, don't cancel the others.
      matrix:
        version: ${{ fromJson(needs.check_for_new_releases.outputs.matrix) }}

    steps:
      - name: Checkout packaging repository
        uses: actions/checkout@v4

      - name: Download and Extract Zen Browser ${{ matrix.version }}
        run: |
          DOWNLOAD_URL="https://github.com/zen-browser/desktop/releases/download/${{ matrix.version }}/zen.linux-x86_64.tar.xz"
          echo "Downloading from ${DOWNLOAD_URL}"
          curl -L --fail -o zen-browser.tar.xz "${DOWNLOAD_URL}"
          tar -xJvf zen-browser.tar.xz

      - name: Prepare Packaging Directory and Debian Version
        run: |
          DEB_VERSION=$(echo "${{ matrix.version }}" | sed 's/^v//')-1
          echo "DEB_VERSION=${DEB_VERSION}" >> $GITHUB_ENV
          STAGING_DIR="deb_dist/zen-browser_${DEB_VERSION}_amd64"
          echo "STAGING_DIR=${STAGING_DIR}" >> $GITHUB_ENV
          mkdir -p "${STAGING_DIR}"/{DEBIAN,opt/zen-browser,usr/bin,usr/share/applications,usr/share/icons/hicolor/256x256/apps}

      - name: Create Debian Control File for ${{ matrix.version }}
        run: |
          cat <<EOF > "${STAGING_DIR}/DEBIAN/control"
          Package: zen-browser
          Version: ${{ env.DEB_VERSION }}
          Architecture: amd64
          Maintainer: Natalie Spiva <sprungles.me@proton.me>
          Description: A privacy-respecting, minimalist fork of Firefox.
           This package installs the Zen Browser into /opt.
          Depends: libgtk-3-0, libdbus-glib-1-2, libxt6
          EOF

      - name: Assemble Files in Staging Directory
        run: |
          mv zen/* "${STAGING_DIR}/opt/zen-browser/"
          ln -s /opt/zen-browser/zen "${STAGING_DIR}/usr/bin/zen-browser"
          cp packaging/zen.desktop "${STAGING_DIR}/usr/share/applications/"
          cp packaging/icons/zen-browser.png "${STAGING_DIR}/usr/share/icons/hicolor/256x256/apps/zen-browser.png"

      - name: Build the .deb Package
        run: |
          dpkg-deb --build "${STAGING_DIR}"
          mv "${STAGING_DIR}.deb" "zen-browser_${{ env.DEB_VERSION }}_amd64.deb"

      - name: Create GitHub Release and Upload Asset for ${{ matrix.version }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          DEB_FILE="zen-browser_${{ env.DEB_VERSION }}_amd64.deb"
          echo "Creating release for tag ${{ matrix.version }} and uploading ${DEB_FILE}..."
          gh release create ${{ matrix.version }} \
            --title "Zen Browser ${{ matrix.version }}" \
            --notes "Debian package for Zen Browser release ${{ matrix.version }}. See the original release at https://github.com/zen-browser/desktop/releases/tag/${{ matrix.version }}" \
            "${DEB_FILE}"
